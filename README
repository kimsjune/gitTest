## Branching
# I wonder if this is really needed if the local branch is automatically called main.
git branch -M main

git remote add

# This creates a remote (also called origin) "main" from my local main branch 
git push -u origin main

# I can create and load a local branch where I can make changes
git checkout -b feature

# Check which branch I am on
git branch

# This pushes my local feature branch into remote (origin) with the same branch name, feature.
git push origin feature

# I can change branches, which changes the committed files.
git checkout main

## Merging
# To avoid git push -f origin main to sync remote to local, I have to use git merge.
# push -f is not recommended when: 
  # repo is public, so other people might have pulled, which would break their connection with origin
  # commits might be deleted
# push origin -f is required when previously commited files are edited. Adding a fresh new file has no effect because there is no conflict? 
# Git doesn't like it when local is different to remote. Which one is the "new" one?
# Following best practice, I would have to create a new branch before every new addition/modification is made. Could be unrealistic... 
# What happens to files outside of terminal when I change branches? How would file explorer know which branch I am on?

# Step 1: create a new branch
git checkout -b dev

# Step 2: make changes and commit
git add . 
git commit -m "Development"

# Step 3: changes are saved to dev branch. Now go back to main before merging
git checkout main

# Step 4: merge
git merge dev

# Step 5: now the dev branch is redundant
git branch -d dev

# Step 5: push
git push origin main

## When the local branch is not syncing with remote branch
# Go to local feature branch
git checkout feature 

# This does the trick
git reset --hard origin/feature

## Removing a branch both locally and remotely
git branch -d feature
git push origin --delete feature
